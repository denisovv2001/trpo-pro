Ресурсы проекта по разработке приложения по обмену настольнымим играми:

1. figma: 
https://www.figma.com/file/jvhodNizdyCKX8yE4ekKlD/Untitled?node-id=0%3A1

2. google documents:
https://docs.google.com/document/d/1QXuiPf-LjJsX-cn1aHYKOuGZaMR9D1PTzBRbPurF94Y/edit#


Данная методичка взята у Андрей Сергеевича. Она для нас тоже актуальна, только у нас называется репозиторий trpo-pro, а не домашние работы (homework) и путь к нему соответсвенно https://github.com/denisivv2001/trpo-pro и клонируется понятное дело он из моего GitHub аккаунта (denisovv2001)

Есть и более сложный вариант взаимодействия с GitHub (использование веток и слияния их), но пока советую разобраться, как этот способ работает. Иначе голова кругом пойдёт.

Домашние работы
	В этом репозитории необходимо разместить результаты выполнения заданий по программированию. Каждую программу нужно поместить в соответствующий каталог согласно названию задания в СДО. Если нужного каталого нет - его надо создать самостоятельно. На экзамене Вы будете демонстрировать свои успехи на основе содержимого данного репозитория - никакие другие носители (флешка, что там лежит в виртуалке) не будут приниматься.

Что почитать
	Основы Git:	
https://proglib.io/p/git-for-half-an-hour/
	Более грубокий интерактивный курс:
https://learngitbranching.js.org/?locale=ru_RU/
	Что такое ветка и как их использовать?
https://smartiqa.ru/courses/git/lesson-3/
	Инструменты Git - Подмодули
https://learngitbranching.js.org/?locale=ru_RU/
	Основы Git - Работа с удалёнными репозиториями:
https://git-scm.com/book/ru/v2/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git-%D0%A0%D0%B0%D0%B1%D0%BE%D1%82%D0%B0-%D1%81-%D1%83%D0%B4%D0%B0%D0%BB%D1%91%D0%BD%D0%BD%D1%8B%D0%BC%D0%B8-%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D1%8F%D0%BC%D0%B8


Что делать
	1. Надо сделать личную копию (fork) этого рипозитория.
	2. Скачать репозиторий к себе на ПК при помощи команды git clone.
	3. Разместить в каталоге репозитория Ваши работы, сохранить изменения на ПК - при помощи команд git add, git status, git commit.
	4. Отправить сохранённые изменения в центральный репозиторий (т.е. на http://gogs.nmbook.ru) - при помощи команды git push.
	5. Повторять шаги 3, 4 итеративно. Если возникает ситуация, что в цетральной репозитории есть более свежие правки, чем на ПК, то предварительно выкачать более свежие правки из центрального репозитория в репозиторий ПК при помощи команды git pull.

1. fork репозитория.
	Изначальный репозиторий по адресу http://gogs.nmbook.ru/and/Homework служит шаблоном для создания каждым студентом личного репозитория с результатами своей работы.

	Первым шагом нужно сделать свою личную копию (ответвление, fork) этого репозитория, с которой Вы и будете далее работать.

	Для этого на странице http://gogs.nmbook.ru/and/Homework в верхнем правом углу нажмите кнопку Fork/Ответвить. В появившемся окне нажмите Fork Repository (Ответвить репозиторий).

	В итоге Вы попадёте на страницу своей копии репозитория с адресом вида http://gogs.nmbook.ru/<ваш логин>/Homework.

2. Скачивание репозитория на свой ПК.
	Доселе мы разрабатывали программы так:
		есть каталог, в котором мы размещаем исходные коды программ
		исходный код программы подаётся на вход компилятору, так что в результате возникает исполняемый файл
		запускаем исполняемый файл и если что-то не так, возвращаемся к правке исходного кода и далее по кругу

	Система контроля версий git добавляет следующие возможности:
		мы можем хранить историю правок - это позволяет разобраться, кто когда и что делал, а также в какой момент всё сломалось.
		мы можем синхронизировать историю правок между разными компьютерами - позволяет разрабатывать одну программу нескольким людям. А также просто делать бэкапы.

	Посему созданный Вами выше репозиторий - это на самом деле просто директория, но с дополнительными свойствами:
		можно делать снимки состояния этой директории в разныем моменты времени. Такие снимки называются коммиты (commit)
		эту директорию и всю её историю (т.е. набор коммитов) можно синхронизировать между различными ПК.

	В данный момент времени репозиторий (=директория с возможность хранения истории правок) существует только на сервере, на котором работает сайт http://gogs.nmbook.ru.

	Сразу отметим, что сама по себе система контроля версий git - это просто консольная программа для сохранения и синхронизации истории правок. Никакого графического или веб интрефейса у неё нет - то, что Вы видите на http://gogs.nmbook.ru - это другая программа, которая взаимодействует c git и позволяет удобнее с ним работать, но сама по себе не является системой контроля версий.

	Для начала работы нам нужно скопировать репозиторий на свой компьютер. На Вашем ПК никакого веб-интерфейса к git уже нет и нужно напрямую взаимодействовать с системой контроля версий git в консоли - выполните:

	git clone <адрес репозитория>

	Адрес репозитория Вы можете найти на странице Вашего репозитория в верхнем правом углу - он выглядит наподобие http://gogs.nmbook.ru/test/Homework.git

	У Вас спросят логин и пароль, далее они будут сохранены в файле ~/.git-credentials, так что в случае с последующих проблем с авторизацией следует удалить этот файл.

	В результате будет создана директория Homework, в которой и нужно дальше работать обычным образом - в соответствующих каталогах размещать исходные коды программ.

	Далее настройте своё имя и email при помощи команд - эта информация будет использована для указания автора коммитов:

	git config --global user.name "<ваш логин на gogs.nmbook.ru>"
	git config --global user.email <ваш_email>

3. Обычная работа + создание коммитов
	Далее в соответсвующих поддиректориях внутри Homework нужно разместить или обычным порядком создать исходный код решения одного из заданий.

	После этого мы хотим зафиксировать в истории момент, когда одно из заданий выполнено. Т.е. мы хотим создать коммит.

	Все операции с git производятся при помощи одноимённой консольной команды git, параметром которой надо передать собственно действие (мы уже выполняли clone и config выше).

	Переходим в директорию Homework или любое место внутри неё. Это нужно для того, чтобы git понял, с каким репозиторием мы работаем - правило просто: в директории какого репозитория находимся, с тем и работаем.

	Для начала при помощи команды git status смотрим, что думает git про наши правки - он нарисует добавленные или изменённые нами файлы красным, что означает, что git ничего с ними делать не собирается до наших дальнейших указаний. Это означает, что в коммит эти правки не попадут.

	При помощи команды git add подготовим правки: git add <шаблон имени файла или директории>.

	Повторный вызов git status нарисует файлы зелёным, что означает, что они будут включены в коммит.

Какие файлы не надо добавлять через git add.
	Добавлять надо исходные коды, заголовочные файлы и прочие текстовые файлы, необходимые для компиляции и работы программы. Что касается бинаных файлов - в частности скомпилированных исполняемых либо объектных файлов, то сохранять их в репозитории не надо, потому что:
		исполняемые и объектные файлы можно очевидным образом получить из исходников. Т.е их сохранине - это дублирование информации. А где дублирование одного и того же, там и бардак - вдруг Вы исходные коды обновите, а исполняемый файл обновить забудете?
		git эффективно умеет работать только с текстовыми файлами. Бинарные он может разве что хранить - сравнивать различные версии и хранить только изменившиеся части он не может. В общем, это пустая трата дисковой памяти.
	
	Из этого правила есть исключение - бинарный файл можно сохранить в репозитории, если необходим для работы программы и его нельзя собрать самостоятельно. Но вам такое здесь не встретится.

	Если случайно выполнили git add для лишних файлов, откатить можно при помощи git reset \<шаблон имени файла или директории>. Но всё это возможно только до создани коммита - после создания коммита откатить можно, но требует уже гораздо более хитрых телодвижений - ведь историю переписывать дело неправильное.

	Наконец, создаём коммит при помощи git commit - откроется текстовый редактор, в котором нужно обязательно написать описание - что мы сделали, сохранить файл и выйти из текстовго редаткора (в nano это Ctrl+O Enter Ctrl+X).

	После этого будет создан коммит. Список коммитов можно просмотреть при помощи команды git log.

	Про любую команду можно прочитать справку при помощи ключа -h либо воспользовавшись командой help: git add -h либо git help add.

	Таким образом мы сохранили состояние репозитория в данный момент времени, но только локально на данном ПК.

	Эту процедуру нужно повторить для каждого задания. Общее правило такое: каждый коммит должен решать одну конкретную задачу, больших коммитов, делающих всё и сразу следует избегать.

4. Отправка сохранённых изменений в центральный репозиторий
	Выполнетие git push - если всё пройдёт успешно, изменения попадут в центральный репозиторий и станут видны на http://gogs.nmbook.ru/

	В случае проблем с авторизацией удалите файл ~/.git-credentials и попробуйте снова.



Сприсок полезных команд:
git branch 			Отображет все ветки, перед текущей веткой находится символ *
git branch <name>	Создание новой ветки с именем name
git log				Отображет информацию о коммитах, автор, дата загрузки, комментарий.
git checkout <name>	Переключаемся на ветку 'name'
git status			Файлы добавленные в commint и файлы, находящиеся в директории